/*
举例说明一下几种情况的区别:
    1) *++pt 
    2) ++*pt
    3) (*pt)++
    4) *pt++
*/

#include <iostream>

using namespace std;


int main(void)
{
    double arr[5] = {21.1, 32.8, 43.5, 54.2, 65.9};
    double *pt = arr;

    // cout << "*pt = " << *pt << endl;       // 打印第一元素

    cout << "*++pt = " << *++pt << endl;   // 打印第二元素
    /*
    分析(运算符优先级):
        1) * 和 ++ 优先级都比 << 高
        2) "* 运算符" 和 "++ 运算符" 的优先级是"相同"的, 
        3) 优先级相同时, 按照 '从右到左'的顺序运行
    
    因此, *++pt 的运算顺序是:
        1) ++pt, pt 指向第二个元素
        2) *pt, 打印第二个元素
        此时, pt 指针已经指向第二个元素了哦!!
    */


    cout << "++*pt = " << ++*pt << endl;  // 打印: 第二个元素+1
    /*
    执行顺序:
        1) *pt, 取出第二个元素
        2) ++*pt, 是前缀写法, 此时先执行执行 ++ 运算, 然后再执行 cout 的流输出, 
    
    因此, 这条语句会打印第二个元素+1, 
        此时, 第二个元素已经变成了 33.8
    */
    
    cout << "(*pt)++ = " << (*pt)++ << endl; // 打印: 第二个元素+1
    /*
    执行顺序:
        1) 括号优先级最高, 先执行*pt, 取出第二个元素
        2) (*pt)++, 是后缀写法, 此时先执行 cout 的流输出, 然后再执行 ++ 运算,
    
    因此, 这条语句会打印第二个元素(显示33.8是因为上面的cout语句已经把第二个元素+1了), 然后再将第二个元素+1, 
        这时候, 第二元素变成了 34.8
    */

    // 注意: 前面的 *++pt 的语句把 pt 指向了第二个元素
    cout << "*pt = " << *pt << endl;     // 打印: 34.8


    cout << "*pt++ = " << *pt++ << endl; // 打印: 34.8
    /*
    执行顺序:
        1) 此时 pt 左右两侧都有运算符, 并且这两种运算符的优先级相同, 因此, 按照 '从右到左'的顺序运行
        2) 先执行 pt++, 但由于是 "后缀写法", 所以 pt 指针的地址会先被取出来(这个地址指向第二个元素), 做完表达式其他的运算之后, pt 指针才会+1
        3) 现在 pt 指针中取出来的地址是 "指向第二个元素的", 这时候, 这个地址与 * 运算符结合, 取出了第二个元素
        4) 打印第二个元素
        5) pt 指针变量进行 +1 运算, 执行之后, pt 指向了第三个元素

    因此, 我们运行这个语句之后的效果是:
        1) 打印数组第二个元素的值
        2) pt 指向 第三个元素
    */

    // 验证一下当前 pt 是不是指向了第三个元素
    cout << "*pt = " << *pt << endl;     // 打印: 43.5
    
    return 0;
}


